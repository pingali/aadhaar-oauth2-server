
# Configuration for the authentication client 

# Notes 
# All paths are relative to the configuration file 
common: { 

    # Mode of operations: testing, staging or productions. 
    # Right now only the 'testing' mode changes the default
    # default behavior. 
    #
    # Change this to 'testing' if you are testing the generation 
    # of outgoing message 
    mode: 'staging',

    # Client terminal ID. Right now this is the only valid value    
    tid: "public", 

    # AUA attributes including the AUA names (ac, sa) 
    # AUA keys and certificates including the license key 
    sa: "public", 
    ac: "public",

    license_key:  "MKg8njN6O+QRUmYF+TrbBUCqlrCnbN/Ns6hYbnnaOk99e5UGNhhE/xQ=",
    private_key: 'public_key.pem',  # note that public refers to
    public_cert: 'public_cert.pem', # public AuA 
    pkcs_path: "public.p12",
    pkcs_password: "public",
    uid_cert_path: "uidai_auth_stage.cer",

    # General parameters derived from the spec 
    encryption_algorithm: 'aes_256_ecb',
    rsa_key_len: 32, 
    sha256_length: 256,    
    ver: "1.5",
    auth_url: 'http://auth.uidai.gov.in/1.5/'    
    data_xmlns: "http://www.uidai.gov.in/authentication/uid-auth-request-data/1.0",
    request_xmlns:"http://www.uidai.gov.in/authentication/uid-auth-request/1.0",
    
    # The incoming and outgoing XMLs are checked against the XSDs 
    # distributed along with the packages. 
    # --------- DO NOT MODIFY THE XSD PATHS --------------------
    request_xsd: 'xsd/uid-auth-request.xsd',
    response_xsd: 'xsd/uid-auth-response.xsd'   
    # --------- DO NOT MODIFY THE XSD PATHS --------------------
    
    # Enable debugging 
    logfile: 'execution.log',
    loglevel: "DEBUG",
    logformat:'%(asctime)-6s: %(name)s - %(levelname)s - %(message)s'
}

###################################################
#=> Configuration for AUA/ASA servers 
###################################################

aua: $aua_encapsulate 

aua_relay: { 
     type: 'relay', 
}

aua_encapsulate: { 
     type: 'encapsulate',
     url: 'http://127.0.0.1:8001/',
     binding: {	
          host:	'127.0.0.1',
	  port: 8000   
     },
}

###################################################
#=> Configuration for AuthRequest and AuthData module 
###################################################

# Options for 'command'
#
#    'generate'
#     Generate (signed) XML using the parameters specified 
#     
#      Parameters 
#         'demographics': List containing the attributes that must 
#             be included in the Pid XML 
#         'biometrics': List containing the attributes that must be 
#             included in the PidXML 
#
#         <for each of the attributes a hash by that name>
#         'Pi': 
#              Valid attributes based on the spec 
#              'ms': matching strategy 
#              'name': Name of the individual 
#
#
#          'analyze'
#          Print statistics about the unsigned and signed XMLs 
#
#          'xml', 'signedxml', 'xmlcleanup' 
#          Files to store the unsigned and signed xmls and whether 
#          the file should be cleaned upon completion. 
#

request: $request_bio

request_demo: {

    # What to authenticate? 
    demographics: ["Pi"],
    biometrics: []

    command: "generate",
    uid: "999999990019",    
    Pi: { 
    	name: "Shivshankar Choudhury",
	ms: "E"
    }

    # What extra should I do with the xmls? 
    analyze: True,

    # temporary files and what to do with them 
    xml: "/tmp/request.xml",
    signedxml: "/tmp/request.xml.sig",
    xmlcleanup: True

}
# => used by request.py
request_bio: { 
    
    #=> is the XML signature template in the XML file 
    use_template: False, 
    
    # What to authenticate
    demographics: ["Pi"],
    biometrics: ["FMR"],

    #=> Input data
    command: "generate",
    uid: "999999990019",

    Pi: { 
    	name: "Shivshankar Choudhury",
	ms: "E"
    },

    FMR:{
        bio: "Rk1SACAyMAAAAADkAAgAyQFnAMUAxQEAAAARIQBqAGsgPgCIAG0fRwC2AG2dSQBVAIUjPABuALShMgCxAL0jMAByAM6lPgCmAN2kQQBwAN8qNAB1AN8mPADJAOcgOQA8AOorNABoAOomOQC+AO2fMQDFAPqlSgCvAP8lRQB8AQuhPABwAQ4fMgB7ASqcRADAAS4iNwCkATMeMwCFATYeNwBLATYwMQBWATcoMQCkATecMQBEATwyMgBJAUciQQCkAU8cNQB9AVQWNgCEAVUVRACoAVgYOgBBAV69NgCsAWeYNwAA"     },

    # What extra should I do with the xmls? 
    analyze: True,

    # temporary files and what to do with them 
    xml: "/tmp/request.xml",
    signedxml: "/tmp/request.xml.sig",
    xmlcleanup: True
}

###################################################
#=> Configuration for AuthResponse modeule
###################################################

# Options for 'command'
#
#    'validate'
#     Validate an incoming response for structure  (for signature 
#     in future) 
# 

#=> Used by response.py
response: $response_validate

response_validate: { 

    # What response.py do? 
    command: "validate",
    xml: "authresponse.xml"
}
###################################################
#=> Configuration for AuthCrypt modeule
###################################################

# Options for 'command'
#
#     'test'
#      Only one command is supported right now. It tests whether
#      the x509 and the AES encryption are working. 
#
#        Parameters: 
#            'msg': The text to be encrypted 
#            'key': The key that must be used (for AES encryption)
#

#=> used by crypt.py 
# Mainly for testing the x509 and AES encryption/decryption functionality. 
crypt: $crypt_test

crypt_test: {
    command: "test",
    msg: "qwrtttrtyutyyyyy",
    key: "sdkfsdfldfh123213213" 
}


###################################################
#=> Configuration for AuthSignature modeule
###################################################

# Options for 'command'
#
#     'sign' 
#     Takes an unsigned xml and returns a signed xml. 
#     Parameters: 
#        xml: path to file containing unsigned xml 
#        signedxml: path to file in which the signed xml must be 
#                   stored
#
#     'verify' 
#     Takes a signed xml and verifies whether it has been 
#     signed using the private key corresponding to the UID 
#     public key 

# => used by signature.py
# Mostly to specify the input and output files.
signature: $signature_default 

signature_default: {
    command: 'sign'
    xml: 'authrequest.xml',
    signedxml: 'authrequest.xml.sig',
}

# Verify the signature in a signed xml
signature_verify: {
    command: 'verify'
    signedxml: 'authrequest.xml.sig',
}

###################################################
#=> configuration for AuthValidate
###################################################

# Options for 'command'
#      'xsd'
#      This assumes unsigned xml and validates the xml against the XSD.
#      In addition it does XML element-by-element content validation" 
#
#      'xml-only' 
#      The script only does XML element-by-element content validation
#      This does not do any XSD validation 
#      
#      'extract' 
#      Extract the session and payload (pid) data using private keys ,
#      and check for integrity
#
#      'xml-with-signature' (not supported yet)
#      This is 'xml-only' plus signature validation 
#  
#


# Configuration for the AuthXML validator
validate: $validate_xml_only

validate_xml_only: {
    
    #=> extract: extract the Data, Hmac and Skey 
    command: 'xml-only'
    
    #=> Input file 
    xml: 'authrequest.xml.sig',
    
    # Is this file signed? If signed, then we cant run the XSD check 
    # on the file. 
    signed: True, 
}

###################################################
#=> Configuration for Auth Batch Requests
###################################################

batch: $batch_default

# Options for 'command'
#
#    No specific options 
#    Parameters:  
#           'json': path to the input data

batch_default: {
    json: 'test_data.json',
}

###################################################
#=> Configuration for all others 
###################################################

unknown: $unknown_default

unknown_default: {}